                UI.WindowBegin("Head", ref windowPose, new Vec2(20, 0) * U.cm, UIWin.Normal);
                Pose head = Input.Head;
                UI.Label(String.Format("POS xyz: {0,9:F6} {1,9:F6} {2,9:F6}\nDirection: {3,9:F6} {4,9:F6} {5,9:F6}", 
                        head.position.x, head.position.y, head.position.z,
                        head.Ray.direction.x, head.Ray.direction.y, head.Ray.direction.z));
                UI.WindowEnd();

refactor map and data handling

observer position should stand out more (red-white pole?). plus, don't draw
if the map doesn't include the location.

add log window

provide orientation trimming

allow map speciication, including image?, through qr code
- map name (for UI)
- lat/lon extents
- either: zoom level (OSM), or URL to custom map image

reset track lines button (+ max length?)

rotate map text based on head pos

combine map and sky parts where possible

late/missing indicator

align opensky query area with map area

why so many inactive planes, even at the start?

indicator for HL temperature?

check use of geometric altitude for sky mode


fps graph




HoloLens2 doesn't support GPS Sensor, but an app can acquire the user's current location via Wi-Fi. It is less precise but more likely to be available indoors. You can invoke the Windows Runtime API Geolocator.GetGeopositionAsync method in the Windows.Devices.Geolocation namespace to retrieve the current location of the device.
https://docs.microsoft.com/en-us/uwp/api/windows.devices.geolocation.geolocator.getgeopositionasync?view=winrt-22000#Windows_Devices_Geolocation_Geolocator_GetGeopositionAsync


